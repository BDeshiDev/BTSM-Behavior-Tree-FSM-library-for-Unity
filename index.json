{
  "api/BDeshi.BTSM.BTCompleteTransition.html": {
    "href": "api/BDeshi.BTSM.BTCompleteTransition.html",
    "title": "Class BTCompleteTransition | |",
    "keywords": "Class BTCompleteTransition Namespace BDeshi.BTSM Transition that will be taken when a BTNode succeeeds public class BTCompleteTransition : Transition Inheritance object BTCompleteTransition Implements Transition Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors BTCompleteTransition(IBtNode, State) public BTCompleteTransition(IBtNode node, State state) Parameters node IBtNode state State Fields successState The state that the transition will pick if the BTNode succeeds public State successState Field Value State Properties OnTaken public Action OnTaken { get; } Property Value Action SuccessState public State SuccessState { get; } Property Value State TakenLastTime public bool TakenLastTime { get; set; } Property Value bool TransitionToSameState public bool TransitionToSameState { get; set; } Property Value bool Methods Evaluate() public bool Evaluate() Returns bool ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/BDeshi.BTSM.BTDecorator.html": {
    "href": "api/BDeshi.BTSM.BTDecorator.html",
    "title": "Class BTDecorator | |",
    "keywords": "Class BTDecorator Namespace BDeshi.BTSM Base class for decorator BT nodes that can have children public abstract class BTDecorator : BtNodeBase, IBtNode Inheritance object BtNodeBase BTDecorator Implements IBtNode Derived BTMultiDecorator BTSingleDecorator Inherited Members BtNodeBase.Enter() BtNodeBase.Tick() BtNodeBase.InternalTick() BtNodeBase.LastStatus BtNodeBase.Exit() BtNodeBase.Prefix BtNodeBase.lastStatus BtNodeBase.Typename BtNodeBase.EditorName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties GetActiveChildren Get the list of children that would be shown in the editor public abstract IEnumerable<IBtNode> GetActiveChildren { get; } Property Value IEnumerable<IBtNode>"
  },
  "api/BDeshi.BTSM.BTMultiDecorator.html": {
    "href": "api/BDeshi.BTSM.BTMultiDecorator.html",
    "title": "Class BTMultiDecorator | |",
    "keywords": "Class BTMultiDecorator Namespace BDeshi.BTSM Base class for decorator BT nodes that can have multiple children public abstract class BTMultiDecorator : BTDecorator, IBtNode Inheritance object BtNodeBase BTDecorator BTMultiDecorator Implements IBtNode Derived FallbackNode Parallel PriorityFallbackNode Randomizer SequenceNode Inherited Members BTDecorator.GetActiveChildren BtNodeBase.Enter() BtNodeBase.Tick() BtNodeBase.InternalTick() BtNodeBase.LastStatus BtNodeBase.Exit() BtNodeBase.Prefix BtNodeBase.lastStatus BtNodeBase.Typename BtNodeBase.EditorName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods addChild(IBtNode) public abstract void addChild(IBtNode child) Parameters child IBtNode appendChild(IBtNode) public BTMultiDecorator appendChild(IBtNode child) Parameters child IBtNode Returns BTMultiDecorator"
  },
  "api/BDeshi.BTSM.BTSingleDecorator.html": {
    "href": "api/BDeshi.BTSM.BTSingleDecorator.html",
    "title": "Class BTSingleDecorator | |",
    "keywords": "Class BTSingleDecorator Namespace BDeshi.BTSM public abstract class BTSingleDecorator : BTDecorator, IBtNode Inheritance object BtNodeBase BTDecorator BTSingleDecorator Implements IBtNode Derived CooldownNode EnterExitDecorator FailTillComplete IgnoreStatus Repeat TimeoutNode Inherited Members BtNodeBase.Enter() BtNodeBase.Tick() BtNodeBase.InternalTick() BtNodeBase.LastStatus BtNodeBase.Exit() BtNodeBase.Prefix BtNodeBase.lastStatus BtNodeBase.Typename BtNodeBase.EditorName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BTSingleDecorator(IBtNode) protected BTSingleDecorator(IBtNode child) Parameters child IBtNode Fields child The single child BTNode of this decorator protected IBtNode child Field Value IBtNode Properties GetActiveChildren Get the list of children that would be shown in the editor public override IEnumerable<IBtNode> GetActiveChildren { get; } Property Value IEnumerable<IBtNode>"
  },
  "api/BDeshi.BTSM.BTStatus.html": {
    "href": "api/BDeshi.BTSM.BTStatus.html",
    "title": "Enum BTStatus | |",
    "keywords": "Enum BTStatus Namespace BDeshi.BTSM public enum BTStatus Fields Failure = 2 Failed last tick() Ignore = 3 Neither success nor failure, non blocking running Ex Use case: Parallel node where you want to keep running child regardless of what others do NotRunYet = 4 the node has not been called yet DO NOT RETURN THIS ON TICK() Running = 0 Is actively running, will block sequence nodes Success = 1 Succeeded last tick()"
  },
  "api/BDeshi.BTSM.BTWrapperState.html": {
    "href": "api/BDeshi.BTSM.BTWrapperState.html",
    "title": "Class BTWrapperState | |",
    "keywords": "Class BTWrapperState Namespace BDeshi.BTSM public class BTWrapperState : StateBase, State Inheritance object StateBase BTWrapperState Implements State Inherited Members StateBase.Prefix StateBase.FullStateName StateBase.Parent StateBase.Name StateBase.AsChildOf(State) StateBase.GetParentChainName() StateBase.Clone() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BTWrapperState(BtNodeBase) public BTWrapperState(BtNodeBase btRoot) Parameters btRoot BtNodeBase Properties BTRoot public IBtNode BTRoot { get; } Property Value IBtNode LastStatus public BTStatus LastStatus { get; } Property Value BTStatus Methods EnterState() Called when state is entered public override void EnterState() ExitState() Called when state is exited public override void ExitState() Tick() Called to update the state from fsm.tick() public override void Tick() createRootSuccessTransition(State) Creates a transition to a state when the root BT node is complete. DOES NOT automagically go to statemachine. Do that yourself. public BTCompleteTransition createRootSuccessTransition(State to) Parameters to State Returns BTCompleteTransition Newly Created transition."
  },
  "api/BDeshi.BTSM.BtNodeBase.html": {
    "href": "api/BDeshi.BTSM.BtNodeBase.html",
    "title": "Class BtNodeBase | |",
    "keywords": "Class BtNodeBase Namespace BDeshi.BTSM Base POCO abstract class for BT Nodes Inherit from this if you don't want monobehavior BT nodes public abstract class BtNodeBase : IBtNode Inheritance object BtNodeBase Implements IBtNode Derived BTDecorator WaitNode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields lastStatus protected BTStatus lastStatus Field Value BTStatus Properties EditorName public virtual string EditorName { get; } Property Value string LastStatus Node Evaluation result from last tick public BTStatus LastStatus { get; } Property Value BTStatus Prefix public string Prefix { get; set; } Property Value string Typename public string Typename { get; } Property Value string Methods Enter() Called to initialize the BTNode before the first tick() public abstract void Enter() Exit() Called when the BTNode is being exited public abstract void Exit() InternalTick() The tick() method that should be overwritten To allow caching status onto lastStatus public abstract BTStatus InternalTick() Returns BTStatus Tick() NOT VIRTUAL OR ABSTRACT. DO NOT OVERRIDE. Override internal tick instead. This approach is for making tracking status is easier public BTStatus Tick() Returns BTStatus"
  },
  "api/BDeshi.BTSM.BtNodeMonoBase.html": {
    "href": "api/BDeshi.BTSM.BtNodeMonoBase.html",
    "title": "Class BtNodeMonoBase | |",
    "keywords": "Class BtNodeMonoBase Namespace BDeshi.BTSM Base abstract class for BT Nodes that are monobehaviors public abstract class BtNodeMonoBase : MonoBehaviour, IBtNode Inheritance object BtNodeMonoBase Implements IBtNode Fields lastStatus protected BTStatus lastStatus Field Value BTStatus Properties EditorName public virtual string EditorName { get; } Property Value string LastStatus Node Evaluation result from last tick public BTStatus LastStatus { get; } Property Value BTStatus Prefix public string Prefix { get; set; } Property Value string Typename public string Typename { get; } Property Value string Methods Enter() Called to initialize the BTNode before the first tick() public abstract void Enter() Exit() Called when the BTNode is being exited public abstract void Exit() InternalTick() To allow caching status onto lastStatus public abstract BTStatus InternalTick() Returns BTStatus Tick() NOT VIRTUAL OR ABSTRACT. DO NOT OVERRIDE. Override internal tick instead. This approach is for making tracking status is easier public BTStatus Tick() Returns BTStatus"
  },
  "api/BDeshi.BTSM.ContainerState.html": {
    "href": "api/BDeshi.BTSM.ContainerState.html",
    "title": "Interface ContainerState | |",
    "keywords": "Interface ContainerState Namespace BDeshi.BTSM State interface for states that have children You can manage child states without this but implementing this is needed for them to be detected by the editor view public interface ContainerState : State Inherited Members State.EnterState() State.Tick() State.ExitState() State.Prefix State.FullStateName State.Name State.Parent Methods getChildStates() Returns children states under this state IEnumerable<State> getChildStates() Returns IEnumerable<State>"
  },
  "api/BDeshi.BTSM.CooldownNode.CoolDownType.html": {
    "href": "api/BDeshi.BTSM.CooldownNode.CoolDownType.html",
    "title": "Enum CooldownNode.CoolDownType | |",
    "keywords": "Enum CooldownNode.CoolDownType Namespace BDeshi.BTSM public enum CooldownNode.CoolDownType Fields ResetOnExit = 1 ResetOnStart = 0"
  },
  "api/BDeshi.BTSM.CooldownNode.html": {
    "href": "api/BDeshi.BTSM.CooldownNode.html",
    "title": "Class CooldownNode | |",
    "keywords": "Class CooldownNode Namespace BDeshi.BTSM prevent running child for x secs after it has run or it started running public class CooldownNode : BTSingleDecorator, IBtNode Inheritance object BtNodeBase BTDecorator BTSingleDecorator CooldownNode Implements IBtNode Inherited Members BTSingleDecorator.child BTSingleDecorator.GetActiveChildren BtNodeBase.Tick() BtNodeBase.LastStatus BtNodeBase.Prefix BtNodeBase.lastStatus BtNodeBase.Typename object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CooldownNode(BtNodeBase, float, CoolDownType, bool) public CooldownNode(BtNodeBase child, float waitDuration, CooldownNode.CoolDownType type = CoolDownType.ResetOnExit, bool shouldWaitAtStart = false) Parameters child BtNodeBase waitDuration float type CooldownNode.CoolDownType shouldWaitAtStart bool Fields waitDuration public float waitDuration Field Value float waitStart public float waitStart Field Value float Properties EditorName public override string EditorName { get; } Property Value string Methods Enter() Called to initialize the BTNode before the first tick() public override void Enter() Exit() Called when the BTNode is being exited public override void Exit() InternalTick() The tick() method that should be overwritten To allow caching status onto lastStatus public override BTStatus InternalTick() Returns BTStatus startRunning() public void startRunning()"
  },
  "api/BDeshi.BTSM.Editor.FSMEditorWindow.html": {
    "href": "api/BDeshi.BTSM.Editor.FSMEditorWindow.html",
    "title": "Class FSMEditorWindow | |",
    "keywords": "Class FSMEditorWindow Namespace BDeshi.BTSM.Editor public class FSMEditorWindow : EditorWindow Inheritance object FSMEditorWindow Fields runner public FSMRunner runner Field Value FSMRunner selectedState public State selectedState Field Value State"
  },
  "api/BDeshi.BTSM.Editor.html": {
    "href": "api/BDeshi.BTSM.Editor.html",
    "title": "Namespace BDeshi.BTSM.Editor | |",
    "keywords": "Namespace BDeshi.BTSM.Editor Classes FSMEditorWindow"
  },
  "api/BDeshi.BTSM.EnterExitDecorator.html": {
    "href": "api/BDeshi.BTSM.EnterExitDecorator.html",
    "title": "Class EnterExitDecorator | |",
    "keywords": "Class EnterExitDecorator Namespace BDeshi.BTSM Decorator that invokes callbacks when the child node is entered or exited public class EnterExitDecorator : BTSingleDecorator, IBtNode Inheritance object BtNodeBase BTDecorator BTSingleDecorator EnterExitDecorator Implements IBtNode Inherited Members BTSingleDecorator.child BTSingleDecorator.GetActiveChildren BtNodeBase.Tick() BtNodeBase.LastStatus BtNodeBase.Prefix BtNodeBase.lastStatus BtNodeBase.Typename BtNodeBase.EditorName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EnterExitDecorator(BtNodeBase, Action, Action) public EnterExitDecorator(BtNodeBase child, Action onEnter, Action onExit = null) Parameters child BtNodeBase onEnter Action onExit Action Fields OnEnter called when the child node is entered public Action OnEnter Field Value Action OnExit called when the child node is exited public Action OnExit Field Value Action Methods Enter() Called to initialize the BTNode before the first tick() public override void Enter() Exit() Called when the BTNode is being exited public override void Exit() InternalTick() The tick() method that should be overwritten To allow caching status onto lastStatus public override BTStatus InternalTick() Returns BTStatus"
  },
  "api/BDeshi.BTSM.EventDrivenStateMachine-1.html": {
    "href": "api/BDeshi.BTSM.EventDrivenStateMachine-1.html",
    "title": "Class EventDrivenStateMachine<TEvent> | |",
    "keywords": "Class EventDrivenStateMachine<TEvent> Namespace BDeshi.BTSM Alternate type of FSM that can have a generic type of event and register handlers for them public class EventDrivenStateMachine<TEvent> : StateMachine Type Parameters TEvent Inheritance object StateMachine EventDrivenStateMachine<TEvent> Inherited Members StateMachine.curState StateMachine.startingState StateMachine.DebugContext StateMachine.activeTransitions StateMachine.emptyTransitions StateMachine.transitions StateMachine.globalTransitions StateMachine.dummyTransition StateMachine.getAllStates() StateMachine.enter(bool) StateMachine.exitCurState() StateMachine.forceTakeTransition(Transition, bool) StateMachine.Tick() StateMachine.transitionTo(State, bool, bool) StateMachine.addTransition(State, Transition) StateMachine.addTransition(State, State, Func<bool>, Action) StateMachine.addStateCondition(bool) StateMachine.addGlobalTransition(State, Func<bool>, Action) StateMachine.addDummyTransitionTo(State, Func<bool>, Action) StateMachine.addGlobalTransition(Transition) StateMachine.cleanup() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EventDrivenStateMachine(State) public EventDrivenStateMachine(State startingState) Parameters startingState State Fields emptyEventHandlers public static readonly Dictionary<TEvent, Action> emptyEventHandlers Field Value Dictionary<TEvent, Action> Methods HandleTransitioned() Set transitions list to curState's. protected override void HandleTransitioned() addEventHandler(State, TEvent, Action) Add Event Handler for state s sunder Event e. public void addEventHandler(State s, TEvent e, Action handler) Parameters s State e TEvent handler Action Corresponding action. Can cause state change inside. addEventTransition(State, TEvent, State) public void addEventTransition(State from, TEvent e, State to) Parameters from State e TEvent to State addGlobalEventHandler(TEvent, Action) public void addGlobalEventHandler(TEvent e, Action handler) Parameters e TEvent handler Action addGlobalEventTransition(TEvent, State) public void addGlobalEventTransition(TEvent e, State to) Parameters e TEvent to State handleEvent(TEvent) Call the associated handler in this state, then globals public void handleEvent(TEvent e) Parameters e TEvent Event"
  },
  "api/BDeshi.BTSM.FSMRunner.html": {
    "href": "api/BDeshi.BTSM.FSMRunner.html",
    "title": "Class FSMRunner | |",
    "keywords": "Class FSMRunner Namespace BDeshi.BTSM Maintains a FSM Calls tick,enter etc on it The Custom Editor Script looks for this. While you can update the fsm with a different class, it won't show up in the editor without this public class FSMRunner : MonoBehaviour Inheritance object FSMRunner Fields fsm public StateMachine fsm Field Value StateMachine Methods Initialize(StateMachine, bool) Calls fsm.enter public void Initialize(StateMachine fsm, bool callEnter = true) Parameters fsm StateMachine callEnter bool Update() Just ticks FSM. protected virtual void Update()"
  },
  "api/BDeshi.BTSM.FailTillComplete.html": {
    "href": "api/BDeshi.BTSM.FailTillComplete.html",
    "title": "Class FailTillComplete | |",
    "keywords": "Class FailTillComplete Namespace BDeshi.BTSM Decorator that returns failure until child succeeds public class FailTillComplete : BTSingleDecorator, IBtNode Inheritance object BtNodeBase BTDecorator BTSingleDecorator FailTillComplete Implements IBtNode Inherited Members BTSingleDecorator.child BTSingleDecorator.GetActiveChildren BtNodeBase.Tick() BtNodeBase.LastStatus BtNodeBase.Prefix BtNodeBase.lastStatus BtNodeBase.Typename BtNodeBase.EditorName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FailTillComplete(BtNodeBase) public FailTillComplete(BtNodeBase child) Parameters child BtNodeBase Methods Enter() Called to initialize the BTNode before the first tick() public override void Enter() Exit() Called when the BTNode is being exited public override void Exit() InternalTick() The tick() method that should be overwritten To allow caching status onto lastStatus public override BTStatus InternalTick() Returns BTStatus"
  },
  "api/BDeshi.BTSM.FallbackNode.html": {
    "href": "api/BDeshi.BTSM.FallbackNode.html",
    "title": "Class FallbackNode | |",
    "keywords": "Class FallbackNode Namespace BDeshi.BTSM Decorator that keeps on trying children one by one until one succeeds public class FallbackNode : BTMultiDecorator, IBtNode Inheritance object BtNodeBase BTDecorator BTMultiDecorator FallbackNode Implements IBtNode Inherited Members BTMultiDecorator.appendChild(IBtNode) BtNodeBase.Tick() BtNodeBase.LastStatus BtNodeBase.Prefix BtNodeBase.lastStatus BtNodeBase.Typename BtNodeBase.EditorName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FallbackNode(bool) public FallbackNode(bool retry = true) Parameters retry bool FallbackNode(List<IBtNode>) public FallbackNode(List<IBtNode> children) Parameters children List<IBtNode> Fields retry public bool retry Field Value bool Properties GetActiveChildren Get the list of children that would be shown in the editor public override IEnumerable<IBtNode> GetActiveChildren { get; } Property Value IEnumerable<IBtNode> Methods Enter() Called to initialize the BTNode before the first tick() public override void Enter() Exit() Called when the BTNode is being exited public override void Exit() InternalTick() The tick() method that should be overwritten To allow caching status onto lastStatus public override BTStatus InternalTick() Returns BTStatus addChild(IBtNode) public override void addChild(IBtNode child) Parameters child IBtNode"
  },
  "api/BDeshi.BTSM.IBtNode.html": {
    "href": "api/BDeshi.BTSM.IBtNode.html",
    "title": "Interface IBtNode | |",
    "keywords": "Interface IBtNode Namespace BDeshi.BTSM Base interface for BT nodes public interface IBtNode Properties EditorName string EditorName { get; } Property Value string LastStatus Node Evaluation result from last tick BTStatus LastStatus { get; } Property Value BTStatus Prefix string Prefix { get; set; } Property Value string Typename string Typename { get; } Property Value string Methods Enter() Called to initialize the BTNode before the first tick() void Enter() Exit() Called when the BTNode is being exited void Exit() Tick() Internally called to update the BTNode Also expected to set the LastStatus BTStatus Tick() Returns BTStatus BT Node evaluation status"
  },
  "api/BDeshi.BTSM.IgnoreStatus.html": {
    "href": "api/BDeshi.BTSM.IgnoreStatus.html",
    "title": "Class IgnoreStatus | |",
    "keywords": "Class IgnoreStatus Namespace BDeshi.BTSM Calls child but always returns a given BTStatus instead public class IgnoreStatus : BTSingleDecorator, IBtNode Inheritance object BtNodeBase BTDecorator BTSingleDecorator IgnoreStatus Implements IBtNode Inherited Members BTSingleDecorator.child BTSingleDecorator.GetActiveChildren BtNodeBase.Tick() BtNodeBase.LastStatus BtNodeBase.Prefix BtNodeBase.lastStatus BtNodeBase.Typename BtNodeBase.EditorName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IgnoreStatus(BtNodeBase, BTStatus) public IgnoreStatus(BtNodeBase child, BTStatus statusToOverrideWith = BTStatus.Ignore) Parameters child BtNodeBase statusToOverrideWith BTStatus Methods Enter() Called to initialize the BTNode before the first tick() public override void Enter() Exit() Called when the BTNode is being exited public override void Exit() InternalTick() The tick() method that should be overwritten To allow caching status onto lastStatus public override BTStatus InternalTick() Returns BTStatus"
  },
  "api/BDeshi.BTSM.ModularState.html": {
    "href": "api/BDeshi.BTSM.ModularState.html",
    "title": "Class ModularState | |",
    "keywords": "Class ModularState Namespace BDeshi.BTSM A state class with OnEnter tick callbacks public class ModularState : StateBase, State Inheritance object StateBase ModularState Implements State Inherited Members StateBase.Prefix StateBase.FullStateName StateBase.Parent StateBase.Name StateBase.AsChildOf(State) StateBase.GetParentChainName() StateBase.Clone() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ModularState(Action, Action) public ModularState(Action onEnter = null, Action onTick = null) Parameters onEnter Action onTick Action Methods EnterState() Called when state is entered public override void EnterState() ExitState() Called when state is exited public override void ExitState() Tick() Called to update the state from fsm.tick() public override void Tick()"
  },
  "api/BDeshi.BTSM.MonoBehaviorState.html": {
    "href": "api/BDeshi.BTSM.MonoBehaviorState.html",
    "title": "Interface MonoBehaviorState | |",
    "keywords": "Interface MonoBehaviorState Namespace BDeshi.BTSM Implement this interface for monobehavior based states, if you want to avoid inheriting MonoBehaviourStateBase But still have editor state click -> object select and other functionality public interface MonoBehaviorState : State Inherited Members State.EnterState() State.Tick() State.ExitState() State.Prefix State.FullStateName State.Name State.Parent Properties gameObject GameObject gameObject { get; } Property Value GameObject"
  },
  "api/BDeshi.BTSM.MonoBehaviourStateBase.html": {
    "href": "api/BDeshi.BTSM.MonoBehaviourStateBase.html",
    "title": "Class MonoBehaviourStateBase | |",
    "keywords": "Class MonoBehaviourStateBase Namespace BDeshi.BTSM Inherit from this if you want a Monobehavior state C# interfaces are not easily visible in Editor. So this is a Implementation of statebase with monobehaviour public abstract class MonoBehaviourStateBase : MonoBehaviour, MonoBehaviorState, State Inheritance object MonoBehaviourStateBase Implements MonoBehaviorState State Properties FullStateName The name that shows up in the editor public string FullStateName { get; } Property Value string Name public string Name { get; } Property Value string Parent public State Parent { get; set; } Property Value State Prefix public string Prefix { get; set; } Property Value string Methods AsChildOf(State) public State AsChildOf(State p) Parameters p State Returns State EnterState() Called when state is entered public abstract void EnterState() ExitState() Called when state is exited public abstract void ExitState() GetParentChainName() public string GetParentChainName() Returns string Tick() Called to update the state from fsm.tick() public abstract void Tick()"
  },
  "api/BDeshi.BTSM.Parallel.html": {
    "href": "api/BDeshi.BTSM.Parallel.html",
    "title": "Class Parallel | |",
    "keywords": "Class Parallel Namespace BDeshi.BTSM Run all children every tick Succeed on first on succeeding, or when all do. If the later, the children may or may not restart public class Parallel : BTMultiDecorator, IBtNode Inheritance object BtNodeBase BTDecorator BTMultiDecorator Parallel Implements IBtNode Inherited Members BTMultiDecorator.appendChild(IBtNode) BtNodeBase.Tick() BtNodeBase.LastStatus BtNodeBase.Prefix BtNodeBase.lastStatus BtNodeBase.Typename BtNodeBase.EditorName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Parallel(bool, bool) public Parallel(bool allMustSucceed = false, bool repeatSuccessfullChildren = false) Parameters allMustSucceed bool repeatSuccessfullChildren bool Parallel(List<IBtNode>, bool, bool) public Parallel(List<IBtNode> activeChildren, bool allMustSucceed, bool repeatSuccessfullChildren) Parameters activeChildren List<IBtNode> allMustSucceed bool repeatSuccessfullChildren bool Properties GetActiveChildren Get the list of children that would be shown in the editor public override IEnumerable<IBtNode> GetActiveChildren { get; } Property Value IEnumerable<IBtNode> Methods Enter() Called to initialize the BTNode before the first tick() public override void Enter() Exit() Called when the BTNode is being exited public override void Exit() InternalTick() The tick() method that should be overwritten To allow caching status onto lastStatus public override BTStatus InternalTick() Returns BTStatus addChild(IBtNode) public override void addChild(IBtNode child) Parameters child IBtNode"
  },
  "api/BDeshi.BTSM.PriorityFallbackNode.html": {
    "href": "api/BDeshi.BTSM.PriorityFallbackNode.html",
    "title": "Class PriorityFallbackNode | |",
    "keywords": "Class PriorityFallbackNode Namespace BDeshi.BTSM keep on trying earlier children while running lowermost Earlier in list = higher priority public class PriorityFallbackNode : BTMultiDecorator, IBtNode Inheritance object BtNodeBase BTDecorator BTMultiDecorator PriorityFallbackNode Implements IBtNode Inherited Members BTMultiDecorator.appendChild(IBtNode) BtNodeBase.Tick() BtNodeBase.LastStatus BtNodeBase.Prefix BtNodeBase.lastStatus BtNodeBase.Typename BtNodeBase.EditorName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PriorityFallbackNode() public PriorityFallbackNode() PriorityFallbackNode(List<IBtNode>) public PriorityFallbackNode(List<IBtNode> children) Parameters children List<IBtNode> Properties GetActiveChildren Get the list of children that would be shown in the editor public override IEnumerable<IBtNode> GetActiveChildren { get; } Property Value IEnumerable<IBtNode> Methods Enter() Called to initialize the BTNode before the first tick() public override void Enter() Exit() Called when the BTNode is being exited public override void Exit() InternalTick() The tick() method that should be overwritten To allow caching status onto lastStatus public override BTStatus InternalTick() Returns BTStatus addChild(IBtNode) public override void addChild(IBtNode child) Parameters child IBtNode"
  },
  "api/BDeshi.BTSM.Randomizer.html": {
    "href": "api/BDeshi.BTSM.Randomizer.html",
    "title": "Class Randomizer | |",
    "keywords": "Class Randomizer Namespace BDeshi.BTSM public class Randomizer : BTMultiDecorator, IBtNode Inheritance object BtNodeBase BTDecorator BTMultiDecorator Randomizer Implements IBtNode Inherited Members BTMultiDecorator.appendChild(IBtNode) BtNodeBase.Tick() BtNodeBase.LastStatus BtNodeBase.Prefix BtNodeBase.lastStatus BtNodeBase.Typename BtNodeBase.EditorName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties GetActiveChildren Get the list of children that would be shown in the editor public override IEnumerable<IBtNode> GetActiveChildren { get; } Property Value IEnumerable<IBtNode> Methods Enter() Called to initialize the BTNode before the first tick() public override void Enter() Exit() Called when the BTNode is being exited public override void Exit() InternalTick() The tick() method that should be overwritten To allow caching status onto lastStatus public override BTStatus InternalTick() Returns BTStatus addChild(IBtNode) public override void addChild(IBtNode child) Parameters child IBtNode appendChild(float, IBtNode) public virtual Randomizer appendChild(float weight, IBtNode child) Parameters weight float child IBtNode Returns Randomizer calcTotalWeight() public float calcTotalWeight() Returns float pick() public int pick() Returns int"
  },
  "api/BDeshi.BTSM.Repeat.html": {
    "href": "api/BDeshi.BTSM.Repeat.html",
    "title": "Class Repeat | |",
    "keywords": "Class Repeat Namespace BDeshi.BTSM public class Repeat : BTSingleDecorator, IBtNode Inheritance object BtNodeBase BTDecorator BTSingleDecorator Repeat Implements IBtNode Inherited Members BTSingleDecorator.child BTSingleDecorator.GetActiveChildren BtNodeBase.Tick() BtNodeBase.LastStatus BtNodeBase.Prefix BtNodeBase.lastStatus BtNodeBase.Typename BtNodeBase.EditorName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Repeat(BtNodeBase) public Repeat(BtNodeBase child) Parameters child BtNodeBase Repeat(int, BtNodeBase) public Repeat(int n, BtNodeBase child) Parameters n int child BtNodeBase Methods Enter() Called to initialize the BTNode before the first tick() public override void Enter() Exit() Called when the BTNode is being exited public override void Exit() InternalTick() The tick() method that should be overwritten To allow caching status onto lastStatus public override BTStatus InternalTick() Returns BTStatus"
  },
  "api/BDeshi.BTSM.SequenceNode.html": {
    "href": "api/BDeshi.BTSM.SequenceNode.html",
    "title": "Class SequenceNode | |",
    "keywords": "Class SequenceNode Namespace BDeshi.BTSM Continue running one by one until one fail, if no child succeeds, it fails. public class SequenceNode : BTMultiDecorator, IBtNode Inheritance object BtNodeBase BTDecorator BTMultiDecorator SequenceNode Implements IBtNode Inherited Members BTMultiDecorator.appendChild(IBtNode) BtNodeBase.Tick() BtNodeBase.LastStatus BtNodeBase.Prefix BtNodeBase.lastStatus BtNodeBase.Typename BtNodeBase.EditorName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SequenceNode() public SequenceNode() SequenceNode(List<IBtNode>) public SequenceNode(List<IBtNode> children) Parameters children List<IBtNode> Properties GetActiveChildren Get the list of children that would be shown in the editor public override IEnumerable<IBtNode> GetActiveChildren { get; } Property Value IEnumerable<IBtNode> Methods Enter() Called to initialize the BTNode before the first tick() public override void Enter() Exit() Called when the BTNode is being exited public override void Exit() InternalTick() The tick() method that should be overwritten To allow caching status onto lastStatus public override BTStatus InternalTick() Returns BTStatus addChild(IBtNode) public override void addChild(IBtNode child) Parameters child IBtNode"
  },
  "api/BDeshi.BTSM.SimpleTransition.html": {
    "href": "api/BDeshi.BTSM.SimpleTransition.html",
    "title": "Class SimpleTransition | |",
    "keywords": "Class SimpleTransition Namespace BDeshi.BTSM Basic transition class public class SimpleTransition : Transition Inheritance object SimpleTransition Implements Transition Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SimpleTransition(State, Func<bool>, Action) Create a transition to a state public SimpleTransition(State s, Func<bool> evaluateFunc = null, Action onTaken = null) Parameters s State evaluateFunc Func<bool> If NULL Transition will ALWAYS BE TRUE onTaken Action Executed if this is taken Properties OnTaken public Action OnTaken { get; } Property Value Action SuccessState public State SuccessState { get; } Property Value State TakenLastTime public bool TakenLastTime { get; set; } Property Value bool TransitionToSameState public bool TransitionToSameState { get; set; } Property Value bool"
  },
  "api/BDeshi.BTSM.State.html": {
    "href": "api/BDeshi.BTSM.State.html",
    "title": "Interface State | |",
    "keywords": "Interface State Namespace BDeshi.BTSM Interface for a state public interface State Properties FullStateName The name that shows up in the editor string FullStateName { get; } Property Value string Name string Name { get; } Property Value string Parent State Parent { get; set; } Property Value State Prefix string Prefix { get; set; } Property Value string Methods EnterState() Called when state is entered void EnterState() ExitState() Called when state is exited void ExitState() Tick() Called to update the state from fsm.tick() void Tick()"
  },
  "api/BDeshi.BTSM.StateBase.html": {
    "href": "api/BDeshi.BTSM.StateBase.html",
    "title": "Class StateBase | |",
    "keywords": "Class StateBase Namespace BDeshi.BTSM Base POCO state class public abstract class StateBase : State Inheritance object StateBase Implements State Derived BTWrapperState ModularState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FullStateName The name that shows up in the editor public string FullStateName { get; } Property Value string Name public string Name { get; } Property Value string Parent public State Parent { get; set; } Property Value State Prefix public string Prefix { get; set; } Property Value string Methods AsChildOf(State) public State AsChildOf(State p) Parameters p State Returns State Clone() public object Clone() Returns object EnterState() Called when state is entered public abstract void EnterState() ExitState() Called when state is exited public abstract void ExitState() GetParentChainName() public string GetParentChainName() Returns string Tick() Called to update the state from fsm.tick() public abstract void Tick()"
  },
  "api/BDeshi.BTSM.StateCondition.html": {
    "href": "api/BDeshi.BTSM.StateCondition.html",
    "title": "Class StateCondition | |",
    "keywords": "Class StateCondition Namespace BDeshi.BTSM public class StateCondition Inheritance object StateCondition Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StateCondition(StateMachine, bool) public StateCondition(StateMachine fsm, bool defaultValue) Parameters fsm StateMachine defaultValue bool Fields defaultValue public bool defaultValue Field Value bool Methods addStateConditionFalse(State) public StateCondition addStateConditionFalse(State state) Parameters state State Returns StateCondition addStateConditionFunc(State, Func<bool>) public StateCondition addStateConditionFunc(State state, Func<bool> conditionFunc) Parameters state State conditionFunc Func<bool> Returns StateCondition addStateConditionTrue(State) public StateCondition addStateConditionTrue(State state) Parameters state State Returns StateCondition evaluate() public bool evaluate() Returns bool"
  },
  "api/BDeshi.BTSM.StateMachine.html": {
    "href": "api/BDeshi.BTSM.StateMachine.html",
    "title": "Class StateMachine | |",
    "keywords": "Class StateMachine Namespace BDeshi.BTSM basic Finite State machine class public class StateMachine Inheritance object StateMachine Derived EventDrivenStateMachine<TEvent> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StateMachine(State) public StateMachine(State startingState) Parameters startingState State Fields DebugContext public GameObject DebugContext Field Value GameObject curState public State curState Field Value State emptyTransitions This is there in case current state does not have transitions and so that we don't have to create a new list public static readonly List<Transition> emptyTransitions Field Value List<Transition> startingState public State startingState Field Value State Properties activeTransitions Transitions list for this state public List<Transition> activeTransitions { get; protected set; } Property Value List<Transition> dummyTransition public List<Transition> dummyTransition { get; protected set; } Property Value List<Transition> globalTransitions Transitions that are always active public List<Transition> globalTransitions { get; protected set; } Property Value List<Transition> transitions Transitions from a state to another public Dictionary<State, List<Transition>> transitions { get; protected set; } Property Value Dictionary<State, List<Transition>> Methods HandleTransitioned() Set transitions list to curState's. protected virtual void HandleTransitioned() Tick() public void Tick() addDummyTransitionTo(State, Func<bool>, Action) fsm never checks these during tick But can be used via forceTakeTransition() And also shows up in Editor public Transition addDummyTransitionTo(State to, Func<bool> condition = null, Action onTaken = null) Parameters to State condition Func<bool> onTaken Action Returns Transition addGlobalTransition(State, Func<bool>, Action) public Transition addGlobalTransition(State to, Func<bool> condition, Action onTaken = null) Parameters to State condition Func<bool> onTaken Action Returns Transition addGlobalTransition(Transition) public Transition addGlobalTransition(Transition t) Parameters t Transition Returns Transition addStateCondition(bool) public StateCondition addStateCondition(bool defaultValue) Parameters defaultValue bool Returns StateCondition addTransition(State, State, Func<bool>, Action) public Transition addTransition(State from, State to, Func<bool> condition, Action onTaken = null) Parameters from State to State condition Func<bool> onTaken Action Returns Transition addTransition(State, Transition) public Transition addTransition(State from, Transition t) Parameters from State t Transition Returns Transition cleanup() public void cleanup() enter(bool) public void enter(bool callEnter = true) Parameters callEnter bool exitCurState() public void exitCurState() forceTakeTransition(Transition, bool) public void forceTakeTransition(Transition t, bool reEnter = false) Parameters t Transition reEnter bool getAllStates() public State[] getAllStates() Returns State[] transitionTo(State, bool, bool) Transitions to a state given that it is null Calls oldstate.exit() if it is not null Then sets up newState via newState.enter() Handles recursion. public void transitionTo(State newState, bool callEnter = true, bool forceEnterIfSameState = false) Parameters newState State Limit this to states this Dictionary knows about. Otherwise, the Actions/Transitions will not work callEnter bool If true, call the enter function in the state(s) transitioned to Usecase: initialize curState without calling enter forceEnterIfSameState bool"
  },
  "api/BDeshi.BTSM.TimeoutNode.html": {
    "href": "api/BDeshi.BTSM.TimeoutNode.html",
    "title": "Class TimeoutNode | |",
    "keywords": "Class TimeoutNode Namespace BDeshi.BTSM Run child for x secs public class TimeoutNode : BTSingleDecorator, IBtNode Inheritance object BtNodeBase BTDecorator BTSingleDecorator TimeoutNode Implements IBtNode Inherited Members BTSingleDecorator.child BTSingleDecorator.GetActiveChildren BtNodeBase.Tick() BtNodeBase.LastStatus BtNodeBase.Prefix BtNodeBase.lastStatus BtNodeBase.Typename BtNodeBase.EditorName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TimeoutNode(BtNodeBase, float) public TimeoutNode(BtNodeBase child, float timerDuration) Parameters child BtNodeBase timerDuration float Fields timer public FiniteTimer timer Field Value FiniteTimer Methods Enter() Called to initialize the BTNode before the first tick() public override void Enter() Exit() Called when the BTNode is being exited public override void Exit() InternalTick() The tick() method that should be overwritten To allow caching status onto lastStatus public override BTStatus InternalTick() Returns BTStatus"
  },
  "api/BDeshi.BTSM.Transition.html": {
    "href": "api/BDeshi.BTSM.Transition.html",
    "title": "Interface Transition | |",
    "keywords": "Interface Transition Namespace BDeshi.BTSM General interface for Transitions public interface Transition Properties OnTaken Action OnTaken { get; } Property Value Action SuccessState State SuccessState { get; } Property Value State TakenLastTime bool TakenLastTime { get; set; } Property Value bool TransitionToSameState bool TransitionToSameState { get; set; } Property Value bool Methods Evaluate() bool Evaluate() Returns bool"
  },
  "api/BDeshi.BTSM.WaitNode.html": {
    "href": "api/BDeshi.BTSM.WaitNode.html",
    "title": "Class WaitNode | |",
    "keywords": "Class WaitNode Namespace BDeshi.BTSM public class WaitNode : BtNodeBase, IBtNode Inheritance object BtNodeBase WaitNode Implements IBtNode Inherited Members BtNodeBase.Tick() BtNodeBase.LastStatus BtNodeBase.Prefix BtNodeBase.lastStatus BtNodeBase.Typename BtNodeBase.EditorName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WaitNode(float) public WaitNode(float waitTime = 1.9) Parameters waitTime float Fields timer protected FiniteTimer timer Field Value FiniteTimer Methods Enter() Called to initialize the BTNode before the first tick() public override void Enter() Exit() Called when the BTNode is being exited public override void Exit() InternalTick() The tick() method that should be overwritten To allow caching status onto lastStatus public override BTStatus InternalTick() Returns BTStatus"
  },
  "api/BDeshi.BTSM.html": {
    "href": "api/BDeshi.BTSM.html",
    "title": "Namespace BDeshi.BTSM | |",
    "keywords": "Namespace BDeshi.BTSM Classes BTCompleteTransition Transition that will be taken when a BTNode succeeeds BTDecorator Base class for decorator BT nodes that can have children BTMultiDecorator Base class for decorator BT nodes that can have multiple children BTSingleDecorator BTWrapperState BtNodeBase Base POCO abstract class for BT Nodes Inherit from this if you don't want monobehavior BT nodes BtNodeMonoBase Base abstract class for BT Nodes that are monobehaviors CooldownNode prevent running child for x secs after it has run or it started running EnterExitDecorator Decorator that invokes callbacks when the child node is entered or exited EventDrivenStateMachine<TEvent> Alternate type of FSM that can have a generic type of event and register handlers for them FSMRunner Maintains a FSM Calls tick,enter etc on it The Custom Editor Script looks for this. While you can update the fsm with a different class, it won't show up in the editor without this FailTillComplete Decorator that returns failure until child succeeds FallbackNode Decorator that keeps on trying children one by one until one succeeds IgnoreStatus Calls child but always returns a given BTStatus instead ModularState A state class with OnEnter tick callbacks MonoBehaviourStateBase Inherit from this if you want a Monobehavior state C# interfaces are not easily visible in Editor. So this is a Implementation of statebase with monobehaviour Parallel Run all children every tick Succeed on first on succeeding, or when all do. If the later, the children may or may not restart PriorityFallbackNode keep on trying earlier children while running lowermost Earlier in list = higher priority Randomizer Repeat SequenceNode Continue running one by one until one fail, if no child succeeds, it fails. SimpleTransition Basic transition class StateBase Base POCO state class StateCondition StateMachine basic Finite State machine class TimeoutNode Run child for x secs WaitNode Interfaces ContainerState State interface for states that have children You can manage child states without this but implementing this is needed for them to be detected by the editor view IBtNode Base interface for BT nodes MonoBehaviorState Implement this interface for monobehavior based states, if you want to avoid inheriting MonoBehaviourStateBase But still have editor state click -> object select and other functionality State Interface for a state Transition General interface for Transitions Enums BTStatus CooldownNode.CoolDownType"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "| |",
    "keywords": "This is the documentation for the Scripting APIs of this package."
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "1.0.0 | |",
    "keywords": "1.0.0 Initial version"
  },
  "index.html": {
    "href": "index.html",
    "title": "| |",
    "keywords": "This page redirects to the manual."
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "| |",
    "keywords": "MIT License Copyright (c) 2023 B-DeshiDev Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "BTSM-Behavior-Tree-FSM-library-for-Unity | |",
    "keywords": "BTSM-Behavior-Tree-FSM-library-for-Unity BTSM is a Behavior Tree + Finite State Machine library for Unity. States, BT and Transitions are modular and are written entirely in code States can contain behavior trees. Supports Hierarchical Finite State Machines. States can contain child states. Can transition between states depending on func/lambda based conditions. Sequence, Parallel etc. common decorators are provided. Runtime debugging via custom editor window. Since it's fully code based, you can use your IDE to debug, refactor and reuse BT/States easily Manual Manual available here Usage To use: Add a FSMRunner component. Create a FSM, add states and transitions(can be done in start()) Use a BTWrapperState if you want behavior trees. The BT will be run through this state. Pass fsm object to FSMRunner via initialize() Open the FSMEditorwindow. Select the Gameobject with the FSMRunner. The Editor window will work during playmode. I mostly made this for myself but I will add a demo scene if there is interest. The project I'm using this in would be hard to use as an independent demo project."
  }
}