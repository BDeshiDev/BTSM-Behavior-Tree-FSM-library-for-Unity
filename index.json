{
  "api/BDeshi.BTSM.BTCompleteTransition-1.html": {
    "href": "api/BDeshi.BTSM.BTCompleteTransition-1.html",
    "title": "Class BTCompleteTransition<TState> | |",
    "keywords": "Class BTCompleteTransition<TState> Namespace BDeshi.BTSM public class BTCompleteTransition<TState> : Transition<TState>, TransitionBase where TState : IState Type Parameters TState Inheritance object BTCompleteTransition<TState> Implements Transition<TState> TransitionBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors BTCompleteTransition(IBtNode, TState) public BTCompleteTransition(IBtNode node, TState typedState) Parameters node IBtNode typedState TState Properties OnTaken public Action OnTaken { get; } Property Value Action SuccessState public IState SuccessState { get; } Property Value IState SuccessTypedState public TState SuccessTypedState { get; } Property Value TState TakenLastTime public bool TakenLastTime { get; set; } Property Value bool TransitionToSameState public bool TransitionToSameState { get; set; } Property Value bool Methods Evaluate() Returns true if evaluation succeeds public bool Evaluate() Returns bool ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/BDeshi.BTSM.BTDecorator.html": {
    "href": "api/BDeshi.BTSM.BTDecorator.html",
    "title": "Class BTDecorator | |",
    "keywords": "Class BTDecorator Namespace BDeshi.BTSM public abstract class BTDecorator : BtNodeBase, IBtNode Inheritance object BtNodeBase BTDecorator Implements IBtNode Derived BTMultiDecorator BTSingleDecorator Inherited Members BtNodeBase.Enter() BtNodeBase.Tick() BtNodeBase.InternalTick() BtNodeBase.LastStatus BtNodeBase.Exit() BtNodeBase.Prefix BtNodeBase.lastStatus BtNodeBase.Typename BtNodeBase.EditorName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties GetActiveChildren public abstract IEnumerable<IBtNode> GetActiveChildren { get; } Property Value IEnumerable<IBtNode>"
  },
  "api/BDeshi.BTSM.BTMultiDecorator.html": {
    "href": "api/BDeshi.BTSM.BTMultiDecorator.html",
    "title": "Class BTMultiDecorator | |",
    "keywords": "Class BTMultiDecorator Namespace BDeshi.BTSM public abstract class BTMultiDecorator : BTDecorator, IBtNode Inheritance object BtNodeBase BTDecorator BTMultiDecorator Implements IBtNode Derived FallbackNode FallbackRepeatNode Parallel ParallelRepeat PriorityFallbackNode Randomizer SequenceNode Inherited Members BTDecorator.GetActiveChildren BtNodeBase.Enter() BtNodeBase.Tick() BtNodeBase.InternalTick() BtNodeBase.LastStatus BtNodeBase.Exit() BtNodeBase.Prefix BtNodeBase.lastStatus BtNodeBase.Typename BtNodeBase.EditorName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods addChild(IBtNode) public abstract void addChild(IBtNode child) Parameters child IBtNode appendChild(IBtNode) public BTMultiDecorator appendChild(IBtNode child) Parameters child IBtNode Returns BTMultiDecorator"
  },
  "api/BDeshi.BTSM.BTSingleDecorator.html": {
    "href": "api/BDeshi.BTSM.BTSingleDecorator.html",
    "title": "Class BTSingleDecorator | |",
    "keywords": "Class BTSingleDecorator Namespace BDeshi.BTSM public abstract class BTSingleDecorator : BTDecorator, IBtNode Inheritance object BtNodeBase BTDecorator BTSingleDecorator Implements IBtNode Derived CooldownNode EnterExitDecorator FailTillComplete IgnoreStatus Repeat TimeoutNode TimerNode Inherited Members BtNodeBase.Enter() BtNodeBase.Tick() BtNodeBase.InternalTick() BtNodeBase.LastStatus BtNodeBase.Exit() BtNodeBase.Prefix BtNodeBase.lastStatus BtNodeBase.Typename BtNodeBase.EditorName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BTSingleDecorator(IBtNode) protected BTSingleDecorator(IBtNode child) Parameters child IBtNode Fields child protected IBtNode child Field Value IBtNode Properties GetActiveChildren public override IEnumerable<IBtNode> GetActiveChildren { get; } Property Value IEnumerable<IBtNode>"
  },
  "api/BDeshi.BTSM.BTStatus.html": {
    "href": "api/BDeshi.BTSM.BTStatus.html",
    "title": "Enum BTStatus | |",
    "keywords": "Enum BTStatus Namespace BDeshi.BTSM public enum BTStatus Fields Failure = 3 Ignore = 4 Neither success nor failure, non blocking running Ex Use case: Parallel node where you want to keep running child regardless of what others do NotRunYet = 0 Running = 1 Is actively running, will block sequence nodes Success = 2"
  },
  "api/BDeshi.BTSM.BTWrapperState.html": {
    "href": "api/BDeshi.BTSM.BTWrapperState.html",
    "title": "Class BTWrapperState | |",
    "keywords": "Class BTWrapperState Namespace BDeshi.BTSM public class BTWrapperState : StateBase, IState, IBTWrapperState Inheritance object StateBase BTWrapperState Implements IState IBTWrapperState Inherited Members StateBase.Prefix StateBase.FullStateName StateBase.Parent StateBase.Name StateBase.AsChildOf(IState) StateBase.GetParentChainName() StateBase.Clone() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BTWrapperState(BtNodeBase) public BTWrapperState(BtNodeBase btRoot) Parameters btRoot BtNodeBase Properties BTRoot public IBtNode BTRoot { get; } Property Value IBtNode LastStatus public BTStatus LastStatus { get; } Property Value BTStatus Methods EnterState() public override void EnterState() ExitState() public override void ExitState() Tick() public override void Tick() createRootSuccessTransition<TState>(TState) Creates a transition to a state when the root BT node is complete. DOES NOT automagically go to statemachine. Do that yourself. public BTCompleteTransition<TState> createRootSuccessTransition<TState>(TState to) where TState : IState Parameters to TState Returns BTCompleteTransition<TState> Newly Created transition. Type Parameters TState"
  },
  "api/BDeshi.BTSM.BtNodeBase.html": {
    "href": "api/BDeshi.BTSM.BtNodeBase.html",
    "title": "Class BtNodeBase | |",
    "keywords": "Class BtNodeBase Namespace BDeshi.BTSM public abstract class BtNodeBase : IBtNode Inheritance object BtNodeBase Implements IBtNode Derived BTDecorator ConditionNode MaintainConditionNode WaitNode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields lastStatus protected BTStatus lastStatus Field Value BTStatus Properties EditorName public virtual string EditorName { get; } Property Value string LastStatus public BTStatus LastStatus { get; } Property Value BTStatus Prefix public string Prefix { get; set; } Property Value string Typename public string Typename { get; } Property Value string Methods Enter() public abstract void Enter() Exit() public abstract void Exit() InternalTick() To allow caching status onto lastStatus public abstract BTStatus InternalTick() Returns BTStatus Tick() NOT VIRTUAL OR ABSTRACT. DO NOT OVERRIDE. Override internal tick instead. This approach is for making tracking status is easier public BTStatus Tick() Returns BTStatus"
  },
  "api/BDeshi.BTSM.BtNodeMonoBase.html": {
    "href": "api/BDeshi.BTSM.BtNodeMonoBase.html",
    "title": "Class BtNodeMonoBase | |",
    "keywords": "Class BtNodeMonoBase Namespace BDeshi.BTSM public abstract class BtNodeMonoBase : MonoBehaviour, IBtNode Inheritance object BtNodeMonoBase Implements IBtNode Fields lastStatus protected BTStatus lastStatus Field Value BTStatus Properties EditorName public virtual string EditorName { get; } Property Value string LastStatus public BTStatus LastStatus { get; } Property Value BTStatus Prefix public string Prefix { get; set; } Property Value string Typename public string Typename { get; } Property Value string Methods Enter() public abstract void Enter() Exit() public abstract void Exit() InternalTick() To allow caching status onto lastStatus public abstract BTStatus InternalTick() Returns BTStatus Tick() NOT VIRTUAL OR ABSTRACT. DO NOT OVERRIDE. Override internal tick instead. This approach is for making tracking status is easier public BTStatus Tick() Returns BTStatus"
  },
  "api/BDeshi.BTSM.ConditionNode.html": {
    "href": "api/BDeshi.BTSM.ConditionNode.html",
    "title": "Class ConditionNode | |",
    "keywords": "Class ConditionNode Namespace BDeshi.BTSM public class ConditionNode : BtNodeBase, IBtNode Inheritance object BtNodeBase ConditionNode Implements IBtNode Inherited Members BtNodeBase.Tick() BtNodeBase.LastStatus BtNodeBase.Prefix BtNodeBase.lastStatus BtNodeBase.Typename BtNodeBase.EditorName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ConditionNode(Func<bool>, BTStatus, BTStatus) public ConditionNode(Func<bool> func, BTStatus successState = BTStatus.Success, BTStatus failState = BTStatus.Failure) Parameters func Func<bool> successState BTStatus failState BTStatus Fields failState public BTStatus failState Field Value BTStatus successState public BTStatus successState Field Value BTStatus Methods Enter() public override void Enter() Exit() public override void Exit() InternalTick() To allow caching status onto lastStatus public override BTStatus InternalTick() Returns BTStatus"
  },
  "api/BDeshi.BTSM.ContainerState.html": {
    "href": "api/BDeshi.BTSM.ContainerState.html",
    "title": "Interface ContainerState | |",
    "keywords": "Interface ContainerState Namespace BDeshi.BTSM State interface for states that have children You can manage child states without this but implementing this is needed for them to be detected by the editor view public interface ContainerState : State Inherited Members State.EnterState() State.Tick() State.ExitState() State.Prefix State.FullStateName State.Name State.Parent Methods getChildStates() Returns children states under this state IEnumerable<State> getChildStates() Returns IEnumerable<State>"
  },
  "api/BDeshi.BTSM.CooldownNode.CoolDownResetType.html": {
    "href": "api/BDeshi.BTSM.CooldownNode.CoolDownResetType.html",
    "title": "Enum CooldownNode.CoolDownResetType | |",
    "keywords": "Enum CooldownNode.CoolDownResetType Namespace BDeshi.BTSM public enum CooldownNode.CoolDownResetType Fields ResetOnExit = 1 ResetOnStart = 0"
  },
  "api/BDeshi.BTSM.CooldownNode.html": {
    "href": "api/BDeshi.BTSM.CooldownNode.html",
    "title": "Class CooldownNode | |",
    "keywords": "Class CooldownNode Namespace BDeshi.BTSM prevent running child for x secs after it has run || it started running public class CooldownNode : BTSingleDecorator, IBtNode Inheritance object BtNodeBase BTDecorator BTSingleDecorator CooldownNode Implements IBtNode Inherited Members BTSingleDecorator.child BTSingleDecorator.GetActiveChildren BtNodeBase.Tick() BtNodeBase.LastStatus BtNodeBase.Prefix BtNodeBase.lastStatus BtNodeBase.Typename object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CooldownNode(BtNodeBase, float, BTStatus, CoolDownResetType, bool) public CooldownNode(BtNodeBase child, float waitDuration, BTStatus cooldownFailStatus = BTStatus.Failure, CooldownNode.CoolDownResetType resetType = CoolDownResetType.ResetOnExit, bool shouldWaitAtStart = false) Parameters child BtNodeBase waitDuration float cooldownFailStatus BTStatus resetType CooldownNode.CoolDownResetType shouldWaitAtStart bool Fields cooldownFailStatus public BTStatus cooldownFailStatus Field Value BTStatus waitDuration public float waitDuration Field Value float waitStart public float waitStart Field Value float Properties EditorName public override string EditorName { get; } Property Value string Methods Enter() public override void Enter() Exit() public override void Exit() InternalTick() To allow caching status onto lastStatus public override BTStatus InternalTick() Returns BTStatus startRunning() public void startRunning()"
  },
  "api/BDeshi.BTSM.EnterExitDecorator.html": {
    "href": "api/BDeshi.BTSM.EnterExitDecorator.html",
    "title": "Class EnterExitDecorator | |",
    "keywords": "Class EnterExitDecorator Namespace BDeshi.BTSM public class EnterExitDecorator : BTSingleDecorator, IBtNode Inheritance object BtNodeBase BTDecorator BTSingleDecorator EnterExitDecorator Implements IBtNode Inherited Members BTSingleDecorator.child BTSingleDecorator.GetActiveChildren BtNodeBase.Tick() BtNodeBase.LastStatus BtNodeBase.Prefix BtNodeBase.lastStatus BtNodeBase.Typename BtNodeBase.EditorName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EnterExitDecorator(BtNodeBase, Action, Action) public EnterExitDecorator(BtNodeBase child, Action onEnter, Action onExit = null) Parameters child BtNodeBase onEnter Action onExit Action Fields OnEnter public Action OnEnter Field Value Action OnExit public Action OnExit Field Value Action Methods Enter() public override void Enter() Exit() public override void Exit() InternalTick() To allow caching status onto lastStatus public override BTStatus InternalTick() Returns BTStatus"
  },
  "api/BDeshi.BTSM.FSMRunner.html": {
    "href": "api/BDeshi.BTSM.FSMRunner.html",
    "title": "Class FSMRunner | |",
    "keywords": "Class FSMRunner Namespace BDeshi.BTSM public class FSMRunner : MonoBehaviour Inheritance object FSMRunner Fields fsm public IRunnableStateMachine fsm Field Value IRunnableStateMachine shouldTickAutomatically public bool shouldTickAutomatically Field Value bool Methods Initialize(IRunnableStateMachine, bool) Calls fsm.enter public void Initialize(IRunnableStateMachine fsm, bool callEnter = true) Parameters fsm IRunnableStateMachine callEnter bool Update() Just ticks FSM. protected virtual void Update() manualTick() Manually tick FSM. public void manualTick()"
  },
  "api/BDeshi.BTSM.FailTillComplete.html": {
    "href": "api/BDeshi.BTSM.FailTillComplete.html",
    "title": "Class FailTillComplete | |",
    "keywords": "Class FailTillComplete Namespace BDeshi.BTSM public class FailTillComplete : BTSingleDecorator, IBtNode Inheritance object BtNodeBase BTDecorator BTSingleDecorator FailTillComplete Implements IBtNode Inherited Members BTSingleDecorator.child BTSingleDecorator.GetActiveChildren BtNodeBase.Tick() BtNodeBase.LastStatus BtNodeBase.Prefix BtNodeBase.lastStatus BtNodeBase.Typename BtNodeBase.EditorName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FailTillComplete(BtNodeBase) public FailTillComplete(BtNodeBase child) Parameters child BtNodeBase Methods Enter() public override void Enter() Exit() public override void Exit() InternalTick() To allow caching status onto lastStatus public override BTStatus InternalTick() Returns BTStatus"
  },
  "api/BDeshi.BTSM.FallbackNode.html": {
    "href": "api/BDeshi.BTSM.FallbackNode.html",
    "title": "Class FallbackNode | |",
    "keywords": "Class FallbackNode Namespace BDeshi.BTSM keep on trying child ren one by one until one succeeds public class FallbackNode : BTMultiDecorator, IBtNode Inheritance object BtNodeBase BTDecorator BTMultiDecorator FallbackNode Implements IBtNode Inherited Members BTMultiDecorator.appendChild(IBtNode) BtNodeBase.Tick() BtNodeBase.LastStatus BtNodeBase.Prefix BtNodeBase.lastStatus BtNodeBase.Typename BtNodeBase.EditorName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FallbackNode(bool) public FallbackNode(bool retry = true) Parameters retry bool FallbackNode(List<IBtNode>) public FallbackNode(List<IBtNode> children) Parameters children List<IBtNode> Fields retry public bool retry Field Value bool Properties GetActiveChildren public override IEnumerable<IBtNode> GetActiveChildren { get; } Property Value IEnumerable<IBtNode> Methods Enter() public override void Enter() Exit() public override void Exit() InternalTick() To allow caching status onto lastStatus public override BTStatus InternalTick() Returns BTStatus addChild(IBtNode) public override void addChild(IBtNode child) Parameters child IBtNode"
  },
  "api/BDeshi.BTSM.FallbackRepeatNode.html": {
    "href": "api/BDeshi.BTSM.FallbackRepeatNode.html",
    "title": "Class FallbackRepeatNode | |",
    "keywords": "Class FallbackRepeatNode Namespace BDeshi.BTSM public class FallbackRepeatNode : BTMultiDecorator, IBtNode Inheritance object BtNodeBase BTDecorator BTMultiDecorator FallbackRepeatNode Implements IBtNode Inherited Members BTMultiDecorator.appendChild(IBtNode) BtNodeBase.Tick() BtNodeBase.LastStatus BtNodeBase.Prefix BtNodeBase.lastStatus BtNodeBase.Typename BtNodeBase.EditorName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FallbackRepeatNode() public FallbackRepeatNode() FallbackRepeatNode(List<IBtNode>) public FallbackRepeatNode(List<IBtNode> children) Parameters children List<IBtNode> Properties GetActiveChildren public override IEnumerable<IBtNode> GetActiveChildren { get; } Property Value IEnumerable<IBtNode> Methods Enter() public override void Enter() Exit() public override void Exit() InternalTick() To allow caching status onto lastStatus public override BTStatus InternalTick() Returns BTStatus addChild(IBtNode) public override void addChild(IBtNode child) Parameters child IBtNode"
  },
  "api/BDeshi.BTSM.IBTWrapperState.html": {
    "href": "api/BDeshi.BTSM.IBTWrapperState.html",
    "title": "Interface IBTWrapperState | |",
    "keywords": "Interface IBTWrapperState Namespace BDeshi.BTSM public interface IBTWrapperState Properties BTRoot IBtNode BTRoot { get; } Property Value IBtNode LastStatus BTStatus LastStatus { get; } Property Value BTStatus"
  },
  "api/BDeshi.BTSM.IBtNode.html": {
    "href": "api/BDeshi.BTSM.IBtNode.html",
    "title": "Interface IBtNode | |",
    "keywords": "Interface IBtNode Namespace BDeshi.BTSM public interface IBtNode Properties EditorName string EditorName { get; } Property Value string LastStatus BTStatus LastStatus { get; } Property Value BTStatus Prefix string Prefix { get; set; } Property Value string Typename string Typename { get; } Property Value string Methods Enter() void Enter() Exit() void Exit() Tick() BTStatus Tick() Returns BTStatus"
  },
  "api/BDeshi.BTSM.IRunnableStateMachine.html": {
    "href": "api/BDeshi.BTSM.IRunnableStateMachine.html",
    "title": "Interface IRunnableStateMachine | |",
    "keywords": "Interface IRunnableStateMachine Namespace BDeshi.BTSM public interface IRunnableStateMachine Properties ActiveTransitions Transitions list for this state IEnumerable<TransitionBase> ActiveTransitions { get; } Property Value IEnumerable<TransitionBase> CurState IState CurState { get; } Property Value IState DebugContext GameObject DebugContext { get; set; } Property Value GameObject GlobalTransitions Transitions that are always active IEnumerable<TransitionBase> GlobalTransitions { get; } Property Value IEnumerable<TransitionBase> ManualTransition Transitions that are not evaluated by the fsm But can be made manually and will be tracked You can change states without this But that won't be shown in the UI IEnumerable<TransitionBase> ManualTransition { get; } Property Value IEnumerable<TransitionBase> Methods Tick() void Tick() cleanup() void cleanup() enter(bool) void enter(bool callEnter = true) Parameters callEnter bool getAllStates() IState[] getAllStates() Returns IState[] tryGetTransitionsForState(IState, out IEnumerable<TransitionBase>) bool tryGetTransitionsForState(IState state, out IEnumerable<TransitionBase> transitionsForState) Parameters state IState transitionsForState IEnumerable<TransitionBase> Returns bool"
  },
  "api/BDeshi.BTSM.IState.html": {
    "href": "api/BDeshi.BTSM.IState.html",
    "title": "Interface IState | |",
    "keywords": "Interface IState Namespace BDeshi.BTSM public interface IState Properties FullStateName string FullStateName { get; } Property Value string Name string Name { get; } Property Value string Parent IState Parent { get; set; } Property Value IState Prefix string Prefix { get; set; } Property Value string Methods EnterState() void EnterState() ExitState() void ExitState() Tick() void Tick()"
  },
  "api/BDeshi.BTSM.IgnoreStatus.html": {
    "href": "api/BDeshi.BTSM.IgnoreStatus.html",
    "title": "Class IgnoreStatus | |",
    "keywords": "Class IgnoreStatus Namespace BDeshi.BTSM public class IgnoreStatus : BTSingleDecorator, IBtNode Inheritance object BtNodeBase BTDecorator BTSingleDecorator IgnoreStatus Implements IBtNode Inherited Members BTSingleDecorator.child BTSingleDecorator.GetActiveChildren BtNodeBase.Tick() BtNodeBase.LastStatus BtNodeBase.Prefix BtNodeBase.lastStatus BtNodeBase.Typename BtNodeBase.EditorName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IgnoreStatus(BtNodeBase, BTStatus) public IgnoreStatus(BtNodeBase child, BTStatus statusToOverrideWith = BTStatus.Ignore) Parameters child BtNodeBase statusToOverrideWith BTStatus Methods Enter() public override void Enter() Exit() public override void Exit() InternalTick() To allow caching status onto lastStatus public override BTStatus InternalTick() Returns BTStatus"
  },
  "api/BDeshi.BTSM.MaintainConditionNode.html": {
    "href": "api/BDeshi.BTSM.MaintainConditionNode.html",
    "title": "Class MaintainConditionNode | |",
    "keywords": "Class MaintainConditionNode Namespace BDeshi.BTSM public class MaintainConditionNode : BtNodeBase, IBtNode Inheritance object BtNodeBase MaintainConditionNode Implements IBtNode Inherited Members BtNodeBase.Tick() BtNodeBase.LastStatus BtNodeBase.Prefix BtNodeBase.lastStatus BtNodeBase.Typename BtNodeBase.EditorName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MaintainConditionNode(Func<bool>, float, bool, BTStatus, BTStatus) public MaintainConditionNode(Func<bool> func, float maintainTime, bool resetOnFail = true, BTStatus successState = BTStatus.Success, BTStatus waitState = BTStatus.Running) Parameters func Func<bool> maintainTime float resetOnFail bool successState BTStatus waitState BTStatus Fields maintainTimer public FiniteTimer maintainTimer Field Value FiniteTimer resetOnFail public bool resetOnFail Field Value bool successState public BTStatus successState Field Value BTStatus waitState public BTStatus waitState Field Value BTStatus Methods Enter() public override void Enter() Exit() public override void Exit() InternalTick() To allow caching status onto lastStatus public override BTStatus InternalTick() Returns BTStatus"
  },
  "api/BDeshi.BTSM.ModularState.html": {
    "href": "api/BDeshi.BTSM.ModularState.html",
    "title": "Class ModularState | |",
    "keywords": "Class ModularState Namespace BDeshi.BTSM public class ModularState : StateBase, IState Inheritance object StateBase ModularState Implements IState Inherited Members StateBase.Prefix StateBase.FullStateName StateBase.Parent StateBase.Name StateBase.AsChildOf(IState) StateBase.GetParentChainName() StateBase.Clone() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ModularState(Action, Action) public ModularState(Action onEnter = null, Action onTick = null) Parameters onEnter Action onTick Action Methods EnterState() public override void EnterState() ExitState() public override void ExitState() Tick() public override void Tick()"
  },
  "api/BDeshi.BTSM.MonoBehaviorState.html": {
    "href": "api/BDeshi.BTSM.MonoBehaviorState.html",
    "title": "Interface MonoBehaviorState | |",
    "keywords": "Interface MonoBehaviorState Namespace BDeshi.BTSM Implement this interface for monobehavior based states, if you want to avoid inheriting MonoBehaviourStateBase But still have editor state click -> object select and other functionality public interface MonoBehaviorState : State Inherited Members State.EnterState() State.Tick() State.ExitState() State.Prefix State.FullStateName State.Name State.Parent Properties gameObject GameObject gameObject { get; } Property Value GameObject"
  },
  "api/BDeshi.BTSM.MonoBehaviourStateBase.html": {
    "href": "api/BDeshi.BTSM.MonoBehaviourStateBase.html",
    "title": "Class MonoBehaviourStateBase | |",
    "keywords": "Class MonoBehaviourStateBase Namespace BDeshi.BTSM C# default interface issues so this is a copy of statebase with monobehaviour inheritance public abstract class MonoBehaviourStateBase : MonoBehaviour, IState Inheritance object MonoBehaviourStateBase Implements IState Properties FullStateName public string FullStateName { get; } Property Value string Name public string Name { get; } Property Value string Parent public IState Parent { get; set; } Property Value IState Prefix public string Prefix { get; set; } Property Value string Methods AsChildOf(IState) public IState AsChildOf(IState p) Parameters p IState Returns IState Clone() public object Clone() Returns object EnterState() public abstract void EnterState() ExitState() public abstract void ExitState() GetParentChainName() public string GetParentChainName() Returns string Tick() public abstract void Tick()"
  },
  "api/BDeshi.BTSM.MultiState.html": {
    "href": "api/BDeshi.BTSM.MultiState.html",
    "title": "Interface MultiState | |",
    "keywords": "Interface MultiState Namespace BDeshi.BTSM public interface MultiState : IState Inherited Members IState.EnterState() IState.Tick() IState.ExitState() IState.Prefix IState.FullStateName IState.Name IState.Parent Properties getActiveState IState getActiveState { get; } Property Value IState Methods getChildStates() IEnumerable<IState> getChildStates() Returns IEnumerable<IState>"
  },
  "api/BDeshi.BTSM.Parallel.html": {
    "href": "api/BDeshi.BTSM.Parallel.html",
    "title": "Class Parallel | |",
    "keywords": "Class Parallel Namespace BDeshi.BTSM Run all children every tick Succeed on first on succeeding, or when all do. If the later, the children may or may not restart public class Parallel : BTMultiDecorator, IBtNode Inheritance object BtNodeBase BTDecorator BTMultiDecorator Parallel Implements IBtNode Inherited Members BTMultiDecorator.appendChild(IBtNode) BtNodeBase.Tick() BtNodeBase.LastStatus BtNodeBase.Prefix BtNodeBase.lastStatus BtNodeBase.Typename BtNodeBase.EditorName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Parallel(bool, bool) public Parallel(bool allMustSucceed = false, bool repeatSuccessfullChildren = false) Parameters allMustSucceed bool repeatSuccessfullChildren bool Parallel(List<IBtNode>, bool, bool) public Parallel(List<IBtNode> activeChildren, bool allMustSucceed = false, bool repeatSuccessfullChildren = false) Parameters activeChildren List<IBtNode> allMustSucceed bool repeatSuccessfullChildren bool Properties GetActiveChildren public override IEnumerable<IBtNode> GetActiveChildren { get; } Property Value IEnumerable<IBtNode> Methods Enter() public override void Enter() Exit() public override void Exit() InternalTick() To allow caching status onto lastStatus public override BTStatus InternalTick() Returns BTStatus addChild(IBtNode) public override void addChild(IBtNode child) Parameters child IBtNode"
  },
  "api/BDeshi.BTSM.ParallelRepeat.html": {
    "href": "api/BDeshi.BTSM.ParallelRepeat.html",
    "title": "Class ParallelRepeat | |",
    "keywords": "Class ParallelRepeat Namespace BDeshi.BTSM Run all children every tick Succeed on first on succeeding, or when all do. If the later, the children may or may not restart public class ParallelRepeat : BTMultiDecorator, IBtNode Inheritance object BtNodeBase BTDecorator BTMultiDecorator ParallelRepeat Implements IBtNode Inherited Members BTMultiDecorator.appendChild(IBtNode) BtNodeBase.Tick() BtNodeBase.LastStatus BtNodeBase.Prefix BtNodeBase.lastStatus BtNodeBase.Typename BtNodeBase.EditorName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ParallelRepeat(List<IBtNode>) public ParallelRepeat(List<IBtNode> activeChildren) Parameters activeChildren List<IBtNode> Fields runninStatus public BTStatus runninStatus Field Value BTStatus Properties GetActiveChildren public override IEnumerable<IBtNode> GetActiveChildren { get; } Property Value IEnumerable<IBtNode> Methods Enter() public override void Enter() Exit() public override void Exit() InternalTick() To allow caching status onto lastStatus public override BTStatus InternalTick() Returns BTStatus addChild(IBtNode) public override void addChild(IBtNode child) Parameters child IBtNode"
  },
  "api/BDeshi.BTSM.PriorityFallbackNode.html": {
    "href": "api/BDeshi.BTSM.PriorityFallbackNode.html",
    "title": "Class PriorityFallbackNode | |",
    "keywords": "Class PriorityFallbackNode Namespace BDeshi.BTSM keep on trying earlier children while running lowermost Earlier in list = higher priority public class PriorityFallbackNode : BTMultiDecorator, IBtNode Inheritance object BtNodeBase BTDecorator BTMultiDecorator PriorityFallbackNode Implements IBtNode Inherited Members BTMultiDecorator.appendChild(IBtNode) BtNodeBase.Tick() BtNodeBase.LastStatus BtNodeBase.Prefix BtNodeBase.lastStatus BtNodeBase.Typename BtNodeBase.EditorName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PriorityFallbackNode() public PriorityFallbackNode() PriorityFallbackNode(List<IBtNode>) public PriorityFallbackNode(List<IBtNode> children) Parameters children List<IBtNode> Properties GetActiveChildren public override IEnumerable<IBtNode> GetActiveChildren { get; } Property Value IEnumerable<IBtNode> Methods Enter() public override void Enter() Exit() public override void Exit() InternalTick() To allow caching status onto lastStatus public override BTStatus InternalTick() Returns BTStatus addChild(IBtNode) public override void addChild(IBtNode child) Parameters child IBtNode"
  },
  "api/BDeshi.BTSM.Randomizer.html": {
    "href": "api/BDeshi.BTSM.Randomizer.html",
    "title": "Class Randomizer | |",
    "keywords": "Class Randomizer Namespace BDeshi.BTSM public class Randomizer : BTMultiDecorator, IBtNode Inheritance object BtNodeBase BTDecorator BTMultiDecorator Randomizer Implements IBtNode Inherited Members BTMultiDecorator.appendChild(IBtNode) BtNodeBase.Tick() BtNodeBase.LastStatus BtNodeBase.Prefix BtNodeBase.lastStatus BtNodeBase.Typename BtNodeBase.EditorName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties GetActiveChildren public override IEnumerable<IBtNode> GetActiveChildren { get; } Property Value IEnumerable<IBtNode> Methods Enter() public override void Enter() Exit() public override void Exit() InternalTick() To allow caching status onto lastStatus public override BTStatus InternalTick() Returns BTStatus addChild(IBtNode) public override void addChild(IBtNode child) Parameters child IBtNode appendChild(float, IBtNode) public virtual Randomizer appendChild(float weight, IBtNode child) Parameters weight float child IBtNode Returns Randomizer calcTotalWeight() public float calcTotalWeight() Returns float pick() public int pick() Returns int"
  },
  "api/BDeshi.BTSM.Repeat.html": {
    "href": "api/BDeshi.BTSM.Repeat.html",
    "title": "Class Repeat | |",
    "keywords": "Class Repeat Namespace BDeshi.BTSM public class Repeat : BTSingleDecorator, IBtNode Inheritance object BtNodeBase BTDecorator BTSingleDecorator Repeat Implements IBtNode Inherited Members BTSingleDecorator.child BTSingleDecorator.GetActiveChildren BtNodeBase.Tick() BtNodeBase.LastStatus BtNodeBase.Prefix BtNodeBase.lastStatus BtNodeBase.Typename BtNodeBase.EditorName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Repeat(BtNodeBase) public Repeat(BtNodeBase child) Parameters child BtNodeBase Repeat(int, BtNodeBase) public Repeat(int n, BtNodeBase child) Parameters n int child BtNodeBase Methods Enter() public override void Enter() Exit() public override void Exit() InternalTick() To allow caching status onto lastStatus public override BTStatus InternalTick() Returns BTStatus"
  },
  "api/BDeshi.BTSM.SequenceNode.html": {
    "href": "api/BDeshi.BTSM.SequenceNode.html",
    "title": "Class SequenceNode | |",
    "keywords": "Class SequenceNode Namespace BDeshi.BTSM Continue running one by one until one fail, then it itself fails. public class SequenceNode : BTMultiDecorator, IBtNode Inheritance object BtNodeBase BTDecorator BTMultiDecorator SequenceNode Implements IBtNode Inherited Members BTMultiDecorator.appendChild(IBtNode) BtNodeBase.Tick() BtNodeBase.LastStatus BtNodeBase.Prefix BtNodeBase.lastStatus BtNodeBase.Typename BtNodeBase.EditorName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SequenceNode() public SequenceNode() SequenceNode(List<IBtNode>) public SequenceNode(List<IBtNode> children) Parameters children List<IBtNode> Fields children protected List<IBtNode> children Field Value List<IBtNode> Properties GetActiveChildren public override IEnumerable<IBtNode> GetActiveChildren { get; } Property Value IEnumerable<IBtNode> Methods Enter() public override void Enter() Exit() public override void Exit() InternalTick() To allow caching status onto lastStatus public override BTStatus InternalTick() Returns BTStatus addChild(IBtNode) public override void addChild(IBtNode child) Parameters child IBtNode"
  },
  "api/BDeshi.BTSM.SimpleTransition-1.html": {
    "href": "api/BDeshi.BTSM.SimpleTransition-1.html",
    "title": "Class SimpleTransition<TState> | |",
    "keywords": "Class SimpleTransition<TState> Namespace BDeshi.BTSM public class SimpleTransition<TState> : Transition<TState>, TransitionBase where TState : IState Type Parameters TState Inheritance object SimpleTransition<TState> Implements Transition<TState> TransitionBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SimpleTransition(TState, Func<bool>, Action) Create a transition to a state public SimpleTransition(TState s, Func<bool> evaluateFunc = null, Action onTaken = null) Parameters s TState evaluateFunc Func<bool> If NULL Transition will ALWAYS BE TRUE onTaken Action Executed if this is taken Properties OnTaken public Action OnTaken { get; } Property Value Action SuccessState public IState SuccessState { get; } Property Value IState SuccessTypedState public TState SuccessTypedState { get; } Property Value TState TakenLastTime public bool TakenLastTime { get; set; } Property Value bool TransitionToSameState public bool TransitionToSameState { get; set; } Property Value bool Methods Evaluate() If Func return true, else return false public bool Evaluate() Returns bool"
  },
  "api/BDeshi.BTSM.State.html": {
    "href": "api/BDeshi.BTSM.State.html",
    "title": "Interface State | |",
    "keywords": "Interface State Namespace BDeshi.BTSM Interface for a state public interface State Properties FullStateName The name that shows up in the editor string FullStateName { get; } Property Value string Name string Name { get; } Property Value string Parent State Parent { get; set; } Property Value State Prefix string Prefix { get; set; } Property Value string Methods EnterState() Called when state is entered void EnterState() ExitState() Called when state is exited void ExitState() Tick() Called to update the state from fsm.tick() void Tick()"
  },
  "api/BDeshi.BTSM.StateBase.html": {
    "href": "api/BDeshi.BTSM.StateBase.html",
    "title": "Class StateBase | |",
    "keywords": "Class StateBase Namespace BDeshi.BTSM public abstract class StateBase : IState Inheritance object StateBase Implements IState Derived BTWrapperState ModularState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FullStateName public string FullStateName { get; } Property Value string Name public string Name { get; } Property Value string Parent public IState Parent { get; set; } Property Value IState Prefix public string Prefix { get; set; } Property Value string Methods AsChildOf(IState) public IState AsChildOf(IState p) Parameters p IState Returns IState Clone() public object Clone() Returns object EnterState() public abstract void EnterState() ExitState() public abstract void ExitState() GetParentChainName() public string GetParentChainName() Returns string Tick() public abstract void Tick()"
  },
  "api/BDeshi.BTSM.StateMachine-1.html": {
    "href": "api/BDeshi.BTSM.StateMachine-1.html",
    "title": "Class StateMachine<TState> | |",
    "keywords": "Class StateMachine<TState> Namespace BDeshi.BTSM public class StateMachine<TState> : IRunnableStateMachine where TState : class, IState Type Parameters TState Inheritance object StateMachine<TState> Implements IRunnableStateMachine Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StateMachine(TState) public StateMachine(TState startingState) Parameters startingState TState Fields ShouldLog public bool ShouldLog Field Value bool emptyTransitions This is there in case current state does not have transitions and so that we don't have to create a new list public static readonly List<Transition<TState>> emptyTransitions Field Value List<Transition<TState>> globalTransitions Transitions that are always active public List<Transition<TState>> globalTransitions Field Value List<Transition<TState>> manualTransitions public List<Transition<TState>> manualTransitions Field Value List<Transition<TState>> startingState public TState startingState Field Value TState transitions Transitions from a state to another public Dictionary<IState, List<Transition<TState>>> transitions Field Value Dictionary<IState, List<Transition<TState>>> Properties ActiveTransitions Transitions list for this state public IEnumerable<TransitionBase> ActiveTransitions { get; } Property Value IEnumerable<TransitionBase> CurState public IState CurState { get; } Property Value IState CurTypedState public TState CurTypedState { get; } Property Value TState DebugContext public GameObject DebugContext { get; set; } Property Value GameObject GlobalTransitions Transitions that are always active public IEnumerable<TransitionBase> GlobalTransitions { get; } Property Value IEnumerable<TransitionBase> ManualTransition Transitions that are not evaluated by the fsm But can be made manually and will be tracked You can change states without this But that won't be shown in the UI public IEnumerable<TransitionBase> ManualTransition { get; } Property Value IEnumerable<TransitionBase> activeTransitions Transitions list for this state public List<Transition<TState>> activeTransitions { get; protected set; } Property Value List<Transition<TState>> Methods HandleTransitioned() Set transitions list to curState's. protected virtual void HandleTransitioned() Tick() public void Tick() addGlobalTransition(Transition<TState>) public Transition<TState> addGlobalTransition(Transition<TState> t) Parameters t Transition<TState> Returns Transition<TState> addGlobalTransition(TState, Func<bool>, Action) public Transition<TState> addGlobalTransition(TState to, Func<bool> condition, Action onTaken = null) Parameters to TState condition Func<bool> onTaken Action Returns Transition<TState> addManualTransitionTo(TState, Action) fsm never checks these during tick But can be used via forceTakeTransition() And also shows up in Editor public Transition<TState> addManualTransitionTo(TState to, Action onTaken = null) Parameters to TState onTaken Action Returns Transition<TState> addTransition(IState, Transition<TState>) public Transition<TState> addTransition(IState from, Transition<TState> t) Parameters from IState t Transition<TState> Returns Transition<TState> addTransition(TState, TState, Func<bool>, Action) public Transition<TState> addTransition(TState from, TState to, Func<bool> condition, Action onTaken = null) Parameters from TState to TState condition Func<bool> onTaken Action Returns Transition<TState> cleanup() public void cleanup() enter(bool) public void enter(bool callEnter = true) Parameters callEnter bool exitCurState() public void exitCurState() forceTakeTransition(Transition<TState>, bool) public void forceTakeTransition(Transition<TState> t, bool reEnter = false) Parameters t Transition<TState> reEnter bool getAllStates() public IState[] getAllStates() Returns IState[] transitionTo(TState, bool, bool) Transitions to a state given that it is null Calls oldstate.exit() if it is not null Then sets up newState via newState.enter() Handles recursion. public void transitionTo(TState newState, bool callEnter = true, bool forceEnterIfSameState = false) Parameters newState TState Limit this to states this Dictionary knows about. Otherwise, the Actions/Transitions will not work callEnter bool If true, call the enter function in the state(s) transitioned to Usecase: initialize curState without calling enter forceEnterIfSameState bool tryGetTransitionsForState(IState, out IEnumerable<TransitionBase>) public bool tryGetTransitionsForState(IState state, out IEnumerable<TransitionBase> transitionsForState) Parameters state IState transitionsForState IEnumerable<TransitionBase> Returns bool"
  },
  "api/BDeshi.BTSM.TimeoutNode.html": {
    "href": "api/BDeshi.BTSM.TimeoutNode.html",
    "title": "Class TimeoutNode | |",
    "keywords": "Class TimeoutNode Namespace BDeshi.BTSM Run child for x secs public class TimeoutNode : BTSingleDecorator, IBtNode Inheritance object BtNodeBase BTDecorator BTSingleDecorator TimeoutNode Implements IBtNode Inherited Members BTSingleDecorator.child BTSingleDecorator.GetActiveChildren BtNodeBase.Tick() BtNodeBase.LastStatus BtNodeBase.Prefix BtNodeBase.lastStatus BtNodeBase.Typename BtNodeBase.EditorName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TimeoutNode(BtNodeBase, float) public TimeoutNode(BtNodeBase child, float timerDuration) Parameters child BtNodeBase timerDuration float Fields timer public FiniteTimer timer Field Value FiniteTimer Methods Enter() public override void Enter() Exit() public override void Exit() InternalTick() To allow caching status onto lastStatus public override BTStatus InternalTick() Returns BTStatus"
  },
  "api/BDeshi.BTSM.TimerNode.html": {
    "href": "api/BDeshi.BTSM.TimerNode.html",
    "title": "Class TimerNode | |",
    "keywords": "Class TimerNode Namespace BDeshi.BTSM public class TimerNode : BTSingleDecorator, IBtNode Inheritance object BtNodeBase BTDecorator BTSingleDecorator TimerNode Implements IBtNode Inherited Members BTSingleDecorator.child BTSingleDecorator.GetActiveChildren BtNodeBase.Tick() BtNodeBase.LastStatus BtNodeBase.Prefix BtNodeBase.lastStatus BtNodeBase.Typename object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TimerNode(IBtNode, float) public TimerNode(IBtNode child, float timeDuration) Parameters child IBtNode timeDuration float Fields duration public FiniteTimer duration Field Value FiniteTimer timeoutStatus public BTStatus timeoutStatus Field Value BTStatus Properties EditorName public override string EditorName { get; } Property Value string Methods Enter() public override void Enter() Exit() public override void Exit() InternalTick() To allow caching status onto lastStatus public override BTStatus InternalTick() Returns BTStatus"
  },
  "api/BDeshi.BTSM.Transition-1.html": {
    "href": "api/BDeshi.BTSM.Transition-1.html",
    "title": "Interface Transition<TState> | |",
    "keywords": "Interface Transition<TState> Namespace BDeshi.BTSM General interface for Transitions public interface Transition<TState> : TransitionBase where TState : IState Type Parameters TState Inherited Members TransitionBase.Evaluate() TransitionBase.SuccessState TransitionBase.TakenLastTime TransitionBase.TransitionToSameState Properties OnTaken Action OnTaken { get; } Property Value Action SuccessTypedState TState SuccessTypedState { get; } Property Value TState"
  },
  "api/BDeshi.BTSM.TransitionBase.html": {
    "href": "api/BDeshi.BTSM.TransitionBase.html",
    "title": "Interface TransitionBase | |",
    "keywords": "Interface TransitionBase Namespace BDeshi.BTSM public interface TransitionBase Properties SuccessState IState SuccessState { get; } Property Value IState TakenLastTime bool TakenLastTime { get; set; } Property Value bool TransitionToSameState bool TransitionToSameState { get; set; } Property Value bool Methods Evaluate() Returns true if evaluation succeeds bool Evaluate() Returns bool"
  },
  "api/BDeshi.BTSM.WaitNode.html": {
    "href": "api/BDeshi.BTSM.WaitNode.html",
    "title": "Class WaitNode | |",
    "keywords": "Class WaitNode Namespace BDeshi.BTSM public class WaitNode : BtNodeBase, IBtNode Inheritance object BtNodeBase WaitNode Implements IBtNode Inherited Members BtNodeBase.Tick() BtNodeBase.LastStatus BtNodeBase.Prefix BtNodeBase.lastStatus BtNodeBase.Typename BtNodeBase.EditorName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WaitNode(float) public WaitNode(float waitTime = 1.9) Parameters waitTime float Fields timer protected FiniteTimer timer Field Value FiniteTimer Methods Enter() public override void Enter() Exit() public override void Exit() InternalTick() To allow caching status onto lastStatus public override BTStatus InternalTick() Returns BTStatus"
  },
  "api/BDeshi.BTSM.html": {
    "href": "api/BDeshi.BTSM.html",
    "title": "Namespace BDeshi.BTSM | |",
    "keywords": "Namespace BDeshi.BTSM Classes BTCompleteTransition<TState> BTDecorator BTMultiDecorator BTSingleDecorator BTWrapperState BtNodeBase BtNodeMonoBase ConditionNode CooldownNode prevent running child for x secs after it has run || it started running EnterExitDecorator FSMRunner FailTillComplete FallbackNode keep on trying child ren one by one until one succeeds FallbackRepeatNode IgnoreStatus MaintainConditionNode ModularState MonoBehaviourStateBase C# default interface issues so this is a copy of statebase with monobehaviour inheritance Parallel Run all children every tick Succeed on first on succeeding, or when all do. If the later, the children may or may not restart ParallelRepeat Run all children every tick Succeed on first on succeeding, or when all do. If the later, the children may or may not restart PriorityFallbackNode keep on trying earlier children while running lowermost Earlier in list = higher priority Randomizer Repeat SequenceNode Continue running one by one until one fail, then it itself fails. SimpleTransition<TState> StateBase StateMachine<TState> TimeoutNode Run child for x secs TimerNode WaitNode Interfaces ContainerState State interface for states that have children You can manage child states without this but implementing this is needed for them to be detected by the editor view IBTWrapperState IBtNode IRunnableStateMachine IState MonoBehaviorState Implement this interface for monobehavior based states, if you want to avoid inheriting MonoBehaviourStateBase But still have editor state click -> object select and other functionality MultiState State Interface for a state TransitionBase Transition<TState> General interface for Transitions Enums BTStatus CooldownNode.CoolDownResetType"
  },
  "api/Global.FSMEditorWindow.html": {
    "href": "api/Global.FSMEditorWindow.html",
    "title": "Class FSMEditorWindow | |",
    "keywords": "Class FSMEditorWindow Namespace Global public class FSMEditorWindow : EditorWindow Inheritance object FSMEditorWindow Fields runner public FSMRunner runner Field Value FSMRunner selectedState public IState selectedState Field Value IState"
  },
  "api/Global.FSMExample.html": {
    "href": "api/Global.FSMExample.html",
    "title": "Class FSMExample | |",
    "keywords": "Class FSMExample Namespace Global public class FSMExample : MonoBehaviour Inheritance object FSMExample"
  },
  "api/Global.html": {
    "href": "api/Global.html",
    "title": "Namespace | |",
    "keywords": "Namespace Classes FSMEditorWindow FSMExample"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "| |",
    "keywords": "This is the documentation for the Scripting APIs of this package."
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "1.0.0 | |",
    "keywords": "1.0.0 Initial version"
  },
  "index.html": {
    "href": "index.html",
    "title": "| |",
    "keywords": "This page redirects to the manual."
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "| |",
    "keywords": "MIT License Copyright (c) 2023 B-DeshiDev Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "BTSM-Behavior-Tree-FSM-library-for-Unity | |",
    "keywords": "BTSM-Behavior-Tree-FSM-library-for-Unity BTSM is a Behavior Tree + Finite State Machine library for Unity. States, BT and Transitions are modular and are written entirely in code States can contain behavior trees. Supports Hierarchical Finite State Machines. States can contain child states. Can transition between states depending on func/lambda based conditions. Sequence, Parallel etc. common decorators are provided. Runtime debugging via custom editor window. Since it's fully code based, you can use your IDE to debug, refactor and reuse BT/States easily Manual Manual available here Usage To use: Add a FSMRunner component. Create a FSM, add states and transitions(can be done in start()) Use a BTWrapperState if you want behavior trees. The BT will be run through this state. Pass fsm object to FSMRunner via initialize() Open the FSMEditorwindow. Select the Gameobject with the FSMRunner. The Editor window will work during playmode. I mostly made this for myself but I will add a demo scene if there is interest. The project I'm using this in would be hard to use as an independent demo project. Manual https://bdeshidev.github.io/BTSM-Behavior-Tree-FSM-library-for-Unity/manual/"
  }
}